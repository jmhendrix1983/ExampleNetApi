trigger:
- '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  projectPath: 'ExampleNetApi.csproj'
  buildConfiguration: 'Debug'

steps:
- task: UseDotNet@2
  inputs:
    version: '7.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet packages'
  inputs:
    command: 'restore'
    projects: '$(projectPath)'

- task: DotNetCoreCLI@2
  displayName: 'Build the project'
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    arguments: '--configuration $(buildConfiguration)'
# Steps Veracode

- script: |
    echo $(Build.SourceBranch)
    echo $(Build.SourceBranchName)
    if [[ $(Build.SourceBranch) == $(Build.SourceBranchName) ]]; then
      echo "Executando Police Scan por ser a Main Branch"
    else
      echo "Executando Sandbox Scan por ser diferente da Main Branch"
    fi
  displayName: 'Variaveis Veracode'

- script: |
    zip -r $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip $(Agent.BuildDirectory) -x ref -x '*UnitTest*' -x '*Xunit*' -x '*Test*' -i '*Debug/*/*ExampleNetApi*'
  displayName: 'ZIP Artefatos'

- script: |
    curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
  displayName: 'Download Pipeline Scanner'

- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: 'pipeline-scan-LATEST.zip'
    destinationFolder: '$(build.artifactstagingdirectory)'
    cleanDestinationFolder: false

- script: |
    chmod -R 777 $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
  displayName: 'Permissão artefato'

# - task: CmdLine@2
#   inputs:
#     script: |
#       export SRCCLR_API_TOKEN='$(SRCCLR_API_TOKEN)'
#       export SRCCLR_SCM_NAME='AzDevOps.$(Build.DefinitionName)'
#       export SCAN_DIR='$(Build.Repository.LocalPath)'
#       curl -sSL https://download.sourceclear.com/ci.sh | bash -s – scan --update-advisor --allow-dirty --quick
#   displayName: 'Veracode SCA'
#   continueOnError: true 

# - script: |
#     java -jar $(build.artifactstagingdirectory)/pipeline-scan.jar -vid $(APIID) -vkey $(APIKEY) --file $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip --issue_details true 
#   displayName: 'Veracode PipelineScan'
#   continueOnError: true

# - task: Veracode@3
#   inputs: 
#     ConnectionDetailsSelection: 'Credentials'
#     apiId: '$(APIID)'
#     apiKey: '$(APIKEY)'
#     veracodeAppProfile: '$(Build.DefinitionName)' # Veracode application profile to scan
#     version: '$(build.buildNumber)' # name of the scan to run
#     filepath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip' # filepath or folderpath of files to upload to Veracode
#     optargs: '-sandboxname mysandbox -deleteIncompleteScan 1' # scan criticality is high, include DLL modules, exclude EXE modules, create sandbox mysandbox during scan, delete a scan with status of incomplete, no modules defined, failed, or cancelled 
#     createSandBox: true # true to scan of new development sandbox
#     createProfile: false # false to enforce using existing profiles
#     failBuildIfUploadAndScanBuildStepFails: false # true to fail build if Upload and Scan task fails to start
#     importResults: false # required to view Veracode results in Azure DevOps
#     failBuildOnPolicyFail: false # true to fail the build if application fails policy